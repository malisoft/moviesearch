{"version":3,"sources":["components/ButtonBackToHome.js","pages/Detail.js","components/Title.js","components/SearchForm.js","components/Movie.js","components/MovieList.js","pages/Home.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["ButtonBackToHome","className","to","Detail","state","movie","id","fetch","then","res","json","console","log","setState","window","history","back","this","props","movieID","match","params","_fetchMovie","Title","Poster","Actors","Metascore","Plot","src","Component","children","SearchForm","inputMovie","_handleChange","e","target","value","_handleSubmit","preventDefault","response","result","Search","totalResults","onResults","onSubmit","type","onChange","placeholder","Movie","poster","title","year","alt","MovieList","movies","map","key","imdbID","Year","Home","usedSearch","results","_handleResults","length","_renderResults","NotFound","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a1841315.chunk.js","sourcesContent":["import React from 'react'\nimport {Link} from 'react-router-dom'\n\nexport const ButtonBackToHome=()=>(\n    <Link\n        className='button is-info'    \n        to='/'\n    >\n        Volver a la portada\n    </Link>\n)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {ButtonBackToHome} from '../components/ButtonBackToHome'\n\nconst API_KEY = \"4287ad07\"\n\nexport class Detail extends Component {\n    /* static propTypes = {\n        id: PropTypes.string\n    } */\n\n    static propTypes={\n        match:PropTypes.shape({\n            params:PropTypes.object,\n            isExact:PropTypes.bool,\n            path:PropTypes.string,\n            url:PropTypes.string\n        })\n    }\n\n    state = { movie: {} }\n\n    _fetchMovie({ id }) {\n        fetch(`http://omdbapi.com/?apikey=${API_KEY}&i=${id}`)\n            .then(res => res.json())\n            .then(movie => {\n                console.log({ movie })\n                this.setState({ movie })\n            })\n    }\n    _goBack(){\n        window.history.back()\n    }\n\n    componentDidMount() {\n        console.log(\"cargando\")\n        console.log(this.props);\n        const { movieID } = this.props.match.params;\n        this._fetchMovie({ id:movieID })\n    }\n    render() {\n        const { Title, Poster, Actors, Metascore, Plot } = this.state.movie;\n        return (\n            <div>\n                <ButtonBackToHome/>\n                <h1>{Title}</h1>\n                <img src={Poster} />\n                <h3>{Actors}</h3>\n                <span>{Metascore}</span>\n                <p>{Plot}</p>\n            </div>\n        )\n    }\n}","import React from \"react\"\nexport const Title = ({children})=>(\n    <h1 className=\"title\">{children}</h1>\n)\n\n//<Title title='Search Movies'/>  => reciviendo por props\n//<Title>Titulo de movies</Title>  => recivinedo por children","import React, { Component } from 'react'\n\nconst API_KEY=\"4287ad07\"\n\nexport class SearchForm extends Component {\n    state={\n        inputMovie:\"\"\n    }\n\n    _handleChange=(e)=>{\n        this.setState({inputMovie:e.target.value})\n    }\n    _handleSubmit=(e)=>{\n        e.preventDefault();\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&s=${this.state.inputMovie}`)\n            .then(response=>{\n                return response.json()\n            })\n            .then(result=>{\n                const { Search=[] , totalResults='0' }=result; \n                console.log({Search,totalResults})\n                \n                this.props.onResults(Search)\n            })\n    }\n    render() {\n        return (\n            <form onSubmit={this._handleSubmit}>\n                <div className=\"field has-addons\">\n                    <div className=\"control\">\n                        <input \n                            className=\"input\" \n                            type=\"text\" \n                            onChange={this._handleChange}\n                            placeholder=\"Give me a movie name\"/>\n                    </div>\n                    <div className=\"control\">\n                        <button className=\"button is-info\">\n                            Search\n                        </button>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {Link} from 'react-router-dom'\n\n\nexport class Movie extends Component {\n    static propTypes = {\n        id:PropTypes.string,\n        title: PropTypes.string,\n        year: PropTypes.string,\n        poster: PropTypes.string\n    }\n    render() {\n        const { id, poster, title, year } = this.props;\n        return(\n            <Link to={`/detail/${id}`} className=\"card\">\n                <div className=\"card-image\">\n                    <figure className=\"image\">\n                    <img \n                        alt={title} \n                        src={poster} />\n                    </figure>\n                </div>\n                <div className=\"card-content\">\n                    <div className=\"media\">\n                        <div className=\"media-content\">\n                            <p className=\"title is-4\">{title}</p>\n                            <p className=\"subtitle is-6\">{year}</p>\n                        </div>\n                    </div>\n                </div>\n            </Link>\n        )\n    }\n}","import React,{Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {Movie} from './Movie'\n\nexport class MovieList extends Component{\n    static propTypes={\n        movies:PropTypes.array\n    }\n\n    render(){\n        const {movies}=this.props\n        return (\n            <div className=\"MovieList\">\n                {\n                    movies.map(movie=>{\n                        return (\n                            <div\n                                className='MovieList-item'\n                                key={movie.imdbID}\n                            >\n                                <Movie \n                                id={movie.imdbID}\n                                title={movie.Title}\n                                year={movie.Year}\n                                poster={movie.Poster}/>\n                            </div>\n                            \n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\n\nimport {Title} from '../components/Title'\nimport {SearchForm} from '../components/SearchForm'\nimport {MovieList} from '../components/MovieList'\n\nexport class Home extends Component {\n\n    state = { usedSearch: false, results: [] }\n\n    _handleResults = (results) => {\n        this.setState({ results, usedSearch: true })\n    }\n\n    _renderResults() {\n        return this.state.results.length === 0\n            ? <p>Sin resultados</p>\n            : <MovieList movies={this.state.results} />\n    }\n    render() {\n        return (\n            <div>\n                <Title>Search Movies</Title>\n                <div className=\"SearchForm-wrapper\">\n                    <SearchForm onResults={this._handleResults} />\n                </div>\n                {\n                    this.state.usedSearch ?\n                        this._renderResults() :\n                        <small>Use this form to seach a movie</small>\n                }\n            </div>\n        )\n    }\n}","import React from 'react'\nimport {ButtonBackToHome} from '../components/ButtonBackToHome'\n\nexport const NotFound=()=>(\n    <div>\n        <h1>404!</h1>\n        <h2>No existe la Página</h2>\n        <ButtonBackToHome/>\n    </div>\n    \n)","import React, { Component } from 'react';\nimport './App.css';\nimport 'bulma/css/bulma.css'\nimport {Detail} from './pages/Detail'\nimport {Home} from './pages/Home'\n\nimport { NotFound } from './pages/NotFound'\n\nimport {Switch,Route} from \"react-router-dom\"\n\nclass App extends Component {\n  render() {\n    //const url=new URL(document.location);\n    //const Page=url.searchParams.has('id')?<Detail id={url.searchParams.get('id')}/>:<Home/>\n\n    //Deploy the page choiced by code\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path='/' component={Home}/>\n          <Route path='/detail/:movieID' component={Detail}/>\n          <Route component={NotFound}/>\n        </Switch>\n        {/* {Page} */}\n      </div>\n    )\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}